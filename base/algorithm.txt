Algorithm text

Goal
The goal of this bubble sort program is to arrange the elements in a set of integers array in ascending order. A set of integer array with different elements is given and by running the program, the entire process of how each element in the array swaps its position with another element is outputted. The integer with greater value in the array changes its position with another integer with a smaller value. First, the printValues() function is a function that prints all the elements of the array in a formatted manner. It tells the user the elements and their order at that particular point when the program is running. The sort() function is a function that compares the values of two elements in the array at a time to decide whether their positions should be swapped. If the program decides that the two element in the array needs to be swapped, a swap function is called to change the position of two elements in the array.

Input
For the main, printValues, and sort function do not require input, because the only variables needed for these functions to execute successfully is the integer array and the number of elements in the array, which is defined as MAX in this program. Since the integer array and integer MAX are global declarations, these two variables can be accessed at any point of the program and so it is not necessary to redefine or take them as an input for the functions mentioned above. For the swap function, two integer pointers are taken as inputs for this function so that the program recognizes the addresses of the elements wanting to be swapped. The data type used as input for this function is integer pointer, which is a pointer that points to an address with an integer stored in it. 

Output
For the main function, the program is outputting or printing the array of integers before and after a bubble sort process is executed in a formatted manner. The sort function is not outputting anything since it is a function that compares the values of elements in the array and decides whether a swap function is needed to change their position. This function does not return anything, but it will rearrange the elements in the array to ascending order since a swap function is called within this function. Finally, for the swap function, it is not returning anything, but the function serves to change the position of the elements in the array using their respective pointers after being called. Therefore, the order of the integer array element is changed after this function is executed successfully.

Steps 
Firstly, the <stdio.h> library is added using the correct syntax, and global variables were declared and initialized like the integer MAX that indicates the number of elements in the array as well as the integer array itself. Since the integer array is used throughout the program, a global declaration and initialization is more appropriate than declaring it locally. Then, the printValues function, sort function, and swap function prototypes were declared before initializing them after the main function. 

Next, the main function will be responsible for calling out the printValue function to print the elements in the array in a formatted manner before and after the array is sorted. This function will first print the integer array before its elements are sorted. Then, the function will call out the sort function to start the sorting process. After, the function will print the elements in the array again with its elements sorted and arranged in ascending order.

The printValues function comes right after the main function. This function basically prints the elements in the array by using a for loop with integer i declared to go through each element of the array. The integer i and global variable MAX are important so that the number of times the for loop runs does not exceed the number of elements in the array, which will cause an error if the program goes beyond the last element of the array.

Then, the sort function is then initialized. This function will need two integers, i and j, that is crucial in making the sort process successful. I used a nested for loop to allow the program go through each element in the array and ensure that it is able to compare the value of one element with all the other elements in the array. The inner for loop has integer j in my condition and the loop is programmed to run MAX-1 times because the computer is comparing the value of one element with the next element of the array, so the number of times needed for the value comparison process to occur is MAX-1 times. Also, I have used an if statement to check if the former element in the array has a greater value than the latter element. If so, a swap function will be called and the positions of the two elements will be changed. If not, the position of the element of the function will remain the same and the latter element will be used for comparison again with the element after itself. Whenever a swap function is called, a printValue function is also called to see how the elements in the array swaps and changes to be in ascending order eventually.

Finally, the swap function takes two integer pointers as its perimeter. The first integer pointer is a pointer that points to the formal element in the array that needs to be swapped with the latter element because of its higher value. The second integer pointer is a pointer that points to the latter element in the array that needs to be swapped with the formal element because of its lower value. Also, a temporary integer, temp, is declared to store the value of the former element before assigning the value of the latter element to it. After that, the value previously stored in the temporary integer is assigned to the latter element variable. From there, the two elements are officially swapped and their positions are changed. The program was then compiled and ran to check for any errors. After finalizing the codes, I did a git add ., git commit -m, and a git push -u origin master to upload the .c file to GitHub, located in a directory that I have created. 
